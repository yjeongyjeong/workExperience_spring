/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2024-03-12 04:16:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardWrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("jar:file:/C:/Users/82104/Desktop/coding/workExperience/spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1709601169261L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-3.1.1.RELEASE.jar", Long.valueOf(1709601169466L));
    _jspx_dependants.put("jar:file:/C:/Users/82104/Desktop/coding/workExperience/spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/82104/Desktop/coding/workExperience/spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/spring-webmvc-3.1.1.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1329370132000L));
    _jspx_dependants.put("jar:file:/C:/Users/82104/Desktop/coding/workExperience/spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/common/common.jsp", Long.valueOf(1710216022508L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("</head>\r\n");
      out.write("<script src=\"/resources/js/jquery-1.10.2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	var $j = jQuery.noConflict();\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("    \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>boardWrite</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	\r\n");
      out.write("	$j(document).ready(function(){\r\n");
      out.write("	var count = 0;\r\n");
      out.write("	var excludeRowCnt = document.querySelectorAll(\"#tableWriter\").length;\r\n");
      out.write("	const table = document.getElementById('boardTable');\r\n");
      out.write("	var beforeTotalRowCnt = table.rows.length; //tr의 개수\r\n");
      out.write("	\r\n");
      out.write("	console.log(\"count >> \" + count);\r\n");
      out.write("	console.log(\"excludeRowCnt >> \" + excludeRowCnt);\r\n");
      out.write("	console.log(\"beforeTotalRowCnt >> \" + beforeTotalRowCnt);\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("//	행추가함수\r\n");
      out.write("		$j(\"#addColumn\").on(\"click\",function(){\r\n");
      out.write("			console.log(\"행추가함수\"); //보인다!\r\n");
      out.write("\r\n");
      out.write(" 			$j.ajax({\r\n");
      out.write("			    url : \"/board/boardTypesAction.do\",\r\n");
      out.write("			    dataType: \"json\",\r\n");
      out.write("			    type: \"GET\",\r\n");
      out.write("			    contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("//			    data : JSON.stringify(param),\r\n");
      out.write("			    success: function(data, textStatus, jqXHR)\r\n");
      out.write("			    {\r\n");
      out.write("			    	//javascript에서 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${codeList}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("를 변수로 받고 데이터를 처리하고 싶은데 변수로 받는 순간 json형태에서 벗어나게 되어서 전부 문자열(변수)로 인식됨..\r\n");
      out.write("			    	//따라서 ajax로 호출하여 성공시 행추가 로직을 실행함\r\n");
      out.write("			    	codeNames = data.map(function(item) {\r\n");
      out.write("			    		    return item.codeName;\r\n");
      out.write("			    	});\r\n");
      out.write("			    	codeIds = data.map(function(item){\r\n");
      out.write("			    		return item.codeId;\r\n");
      out.write("			    	});\r\n");
      out.write("			    	//alert(codeNames);\r\n");
      out.write("			    	\r\n");
      out.write("			    	// select 요소 생성 및 옵션 추가\r\n");
      out.write("		            var addedSelect = document.createElement('select');\r\n");
      out.write("		            addedSelect.name = \"boardType\";\r\n");
      out.write("		            addedSelect.id = \"boardType\";\r\n");
      out.write("\r\n");
      out.write("		            codeNames.forEach(function(codeName, index) {\r\n");
      out.write("		                var option = document.createElement('option');\r\n");
      out.write("		                option.value = codeIds[index]; // 각 option의 value에 codeId를 설정\r\n");
      out.write("		                option.textContent = codeName;\r\n");
      out.write("		                addedSelect.appendChild(option);\r\n");
      out.write("		            });\r\n");
      out.write("		            \r\n");
      out.write("		            /* codeNames.forEach(function(codeName) {\r\n");
      out.write("		                var option = document.createElement('option');\r\n");
      out.write("		                //option.value = codeName; codeName으로 값이 들어가서 controller에서 읽어오지 못함!!\r\n");
      out.write("		                option.textContent = codeName;\r\n");
      out.write("		                addedSelect.appendChild(option);\r\n");
      out.write("		            }); */\r\n");
      out.write("\r\n");
      out.write("		            // 추가된 select 요소를 셀에 추가\r\n");
      out.write("		            var newCell6 = newType.insertCell(1);\r\n");
      out.write("		            newCell6.appendChild(addedSelect);\r\n");
      out.write("		    \r\n");
      out.write("			    },\r\n");
      out.write("			    error: function (jqXHR, textStatus, errorThrown)\r\n");
      out.write("			    {\r\n");
      out.write("			    	alert(\"실패\");\r\n");
      out.write("			    }\r\n");
      out.write("			}); \r\n");
      out.write("			\r\n");
      out.write("			count++;\r\n");
      out.write("			console.log(\"count >> \" + count);\r\n");
      out.write("			\r\n");
      out.write("			//새 행(row)추가 ==> writer보다 앞에.. -1로 잡고 해도 될 것 같고 writer id나 name값으로 해도 될 것 같음 \r\n");
      out.write("			//그래서 그냥 boardWriter 선택해서 하는걸로 했다..ㅎㅎ\r\n");
      out.write("			const boardWriter = document.getElementById('tableWriter');\r\n");
      out.write("			const writerIndex = boardWriter.rowIndex;\r\n");
      out.write("			console.log(\"insert될 위치 writerIndex >> \" + writerIndex ); \r\n");
      out.write("			\r\n");
      out.write("			const newComment = table.insertRow(writerIndex);\r\n");
      out.write("			const newTitle = table.insertRow(writerIndex);\r\n");
      out.write("			const newType = table.insertRow(writerIndex);\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//새 행(orw)에 cell추가\r\n");
      out.write("			const newCell1 = newTitle.insertCell(0);\r\n");
      out.write("			const newCell2 = newTitle.insertCell(1);\r\n");
      out.write("			const newCell3 = newComment.insertCell(0);\r\n");
      out.write("			const newCell4 = newComment.insertCell(1);\r\n");
      out.write("			const newCell5 = newType.insertCell(0);\r\n");
      out.write("			//const newCell6 = newType.insertCell(1); //ajax에서 처리함!\r\n");
      out.write("			\r\n");
      out.write("			//cell에 텍스트 추가\r\n");
      out.write("			newCell1.innerText = 'Title';\r\n");
      out.write("			newCell3.innerText = 'Comment';\r\n");
      out.write("			newCell5.innerText = 'Type';\r\n");
      out.write("			\r\n");
      out.write("			//추가된 애들 스타일 넣기\r\n");
      out.write("			newCell1.align = \"center\";\r\n");
      out.write("			newCell3.align = \"center\";\r\n");
      out.write("			newCell5.align = \"center\";\r\n");
      out.write("			\r\n");
      out.write("			//input 박스로 변환... 이라기보단 추가\r\n");
      out.write("			var addedTitle = document.createElement( 'input' );\r\n");
      out.write("			addedTitle.size = 50;\r\n");
      out.write("			addedTitle.name = \"boardTitle\";\r\n");
      out.write("			newCell2.appendChild(addedTitle);\r\n");
      out.write("			\r\n");
      out.write("			var checkBox = document.createElement( 'input' );\r\n");
      out.write("			checkBox.type = \"checkbox\";\r\n");
      out.write("			checkBox.name = \"deleteCheck\";\r\n");
      out.write("			newCell3.appendChild(checkBox);\r\n");
      out.write("			\r\n");
      out.write("			var addedComment = document.createElement( 'textarea' );\r\n");
      out.write("			addedComment.cols = 55;\r\n");
      out.write("			addedComment.rows = 20;\r\n");
      out.write("			addedComment.name = \"boardComment\";	\r\n");
      out.write("			newCell4.appendChild(addedComment);\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("//	행삭제함수\r\n");
      out.write("		$j(\"#deleteColumn\").on(\"click\",function(){\r\n");
      out.write("			console.log(\"행삭제함수\"); \r\n");
      out.write("			\r\n");
      out.write("			count--;\r\n");
      out.write("			console.log(\"count >> \" + count);\r\n");
      out.write("			\r\n");
      out.write("			const table = document.getElementById('boardTable');\r\n");
      out.write("			var checkbox = $j(\"input:checkbox[name=deleteCheck]:checked\"); //jQuery 객체로 데이터가 담겨있는 상태\r\n");
      out.write("			\r\n");
      out.write("			checkbox.each(function(){\r\n");
      out.write("				//$j(this).parent() : checkbox의 부모는 td\r\n");
      out.write("				//$j(this).parent().parent() : td의 부모는 tr	\r\n");
      out.write("		    var tr = $j(this).closest('tr'); // 현재 체크박스가 속한 tr 요소를 찾음\r\n");
      out.write("		    var titleTr = tr.prev(); // title tr 요소를 찾음\r\n");
      out.write("		    var commentTr = tr; // comment tr 요소는 현재 체크박스가 속한 tr 요소\r\n");
      out.write("		    var typeTr = titleTr.prev(); // type 요소를 찾음\r\n");
      out.write("		    \r\n");
      out.write("		    console.log(\"title의 index >> \" + titleTr[0].rowIndex);\r\n");
      out.write("		    console.log(\"comment의 index >> \" + commentTr[0].rowIndex);\r\n");
      out.write("		    \r\n");
      out.write("		    table.deleteRow(titleTr[0].rowIndex); // title tr 요소 삭제\r\n");
      out.write("		    table.deleteRow(commentTr[0].rowIndex); // comment tr 요소 삭제\r\n");
      out.write("		    table.deleteRow(typeTr[0].rowIndex); // comment tr 요소 삭제\r\n");
      out.write("\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			if(checkbox.length == 0){\r\n");
      out.write("				alert(\"삭제할 행이 없습니다.\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("//board 제출 함수		\r\n");
      out.write("	$j(\"#submit\").on(\"click\",function(e){\r\n");
      out.write("			\r\n");
      out.write("			const table = document.getElementById('boardTable');\r\n");
      out.write("			var boardTitles = $j(\"input[name='boardTitle']\");\r\n");
      out.write("			var boardComments = $j(\"textarea[name='boardComment']\");\r\n");
      out.write("			var boardTypes = $j(\"select[name='boardType']\");\r\n");
      out.write("			\r\n");
      out.write("			console.log(boardTitles);\r\n");
      out.write("			console.log(boardComments);\r\n");
      out.write("			console.log(boardTypes);\r\n");
      out.write("			\r\n");
      out.write("			//var boardMap = new Map(); -> 키값이 중복되므로 사용을 지양해야함 왜냐면 키값이 중복되면 마지막에 저장된값으로 저장되기 때문!\r\n");
      out.write("			var boardData = [];\r\n");
      out.write("			\r\n");
      out.write("			var AfterTotalRowCnt = table.rows.length;\r\n");
      out.write("			console.log(\"AfterTotalRowCnt >> \" + AfterTotalRowCnt);\r\n");
      out.write("\r\n");
      out.write("			//count가 0이 되는 경우(아무런 변화가 없는 경우) => NaN\r\n");
      out.write("			if( count == 0 ){			\r\n");
      out.write("				var divisionNum = (beforeTotalRowCnt-excludeRowCnt);\r\n");
      out.write("				console.log(\"divisionNum >> \"+ (beforeTotalRowCnt-excludeRowCnt) );\r\n");
      out.write("			} else{\r\n");
      out.write("				var divisionNum = ( (AfterTotalRowCnt-excludeRowCnt) - (beforeTotalRowCnt-excludeRowCnt) ) /count;\r\n");
      out.write("				console.log(\"divisionNum >> \"+ divisionNum);\r\n");
      out.write("				//boardData.push(divisionNum);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			for(var i =0; i< boardTitles.length; i++){\r\n");
      out.write("				var title = boardTitles.eq(i).val();\r\n");
      out.write("				var comment = boardComments.eq(i).val();\r\n");
      out.write("				var type = boardTypes.eq(i).val(); //에러 발생\r\n");
      out.write("				\r\n");
      out.write("				var deleteSpaceTitle = title.replace(/\\s/gi, \"\"); // 정규식 => s : 공백 g : 글로벌 매칭.. 일치하는 모든 부분을 찾음 i : 대소문자 구별없이\r\n");
      out.write("				var deleteSpaceComment = comment.replace(/\\s/gi, \"\");\r\n");
      out.write("				\r\n");
      out.write("				const boardVo = { // BoardVo 객체 생성\r\n");
      out.write("						\"boardType\": type,\r\n");
      out.write("			            \"boardTitle\": title,\r\n");
      out.write("			            \"boardComment\": comment\r\n");
      out.write("			        };\r\n");
      out.write("				\r\n");
      out.write("				boardData.push(boardVo );\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 아무것도 없거나 공백만 입력한 경우 제외\r\n");
      out.write("			if( boardTitles.val() == null || boardTitles.val() == \"\" || deleteSpaceTitle == \"\"  ){\r\n");
      out.write("				//e.preventDefault();\r\n");
      out.write("				alert(\"제목을 입력해주세요.\");\r\n");
      out.write("				console.log(\"deleteSpaceTitle >>> \" + deleteSpaceTitle);\r\n");
      out.write("				return false;\r\n");
      out.write("			} \r\n");
      out.write("			if( boardComments.val() == null || boardComments.val() == \"\" || deleteSpaceComment == \"\"   ){\r\n");
      out.write("				//e.preventDefault();\r\n");
      out.write("				alert(\"내용을 입력해주세요.\");\r\n");
      out.write("				console.log(\"deleteSpaceComment >>> \" + deleteSpaceComment);\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		\r\n");
      out.write("//			var $frm = $j('.boardWrite :input');\r\n");
      out.write("//			var param = $frm.serialize();\r\n");
      out.write("\r\n");
      out.write("			var param = boardData; //배열\r\n");
      out.write("	\r\n");
      out.write(" 			$j.ajax({\r\n");
      out.write("			    url : \"/board/boardWriteAction.do\",\r\n");
      out.write("			    dataType: \"json\",\r\n");
      out.write("			    type: \"POST\",\r\n");
      out.write("			    contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("			    data : JSON.stringify(param),\r\n");
      out.write("			    success: function(data, textStatus, jqXHR)\r\n");
      out.write("			    {\r\n");
      out.write("					alert(\"작성완료\");\r\n");
      out.write("					\r\n");
      out.write("					alert(\"메세지:\"+data.success);\r\n");
      out.write("					\r\n");
      out.write("					location.href = \"/board/boardList.do?pageNo=1\";\r\n");
      out.write("			    },\r\n");
      out.write("			    error: function (jqXHR, textStatus, errorThrown)\r\n");
      out.write("			    {\r\n");
      out.write("			    	alert(\"실패\");\r\n");
      out.write("			    }\r\n");
      out.write("			});  \r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("<form class=\"boardWrite\">\r\n");
      out.write("	<table align=\"center\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align=\"right\">\r\n");
      out.write("			<input id=\"deleteColumn\" type=\"button\" value=\"행삭제(Title&Comment)\">\r\n");
      out.write("			<input id=\"addColumn\" type=\"button\" value=\"행추가(Title&Comment)\">\r\n");
      out.write("			<input id=\"submit\" type=\"button\" value=\"작성\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>\r\n");
      out.write("				<table  id=\"boardTable\" border =\"1\"> \r\n");
      out.write("				\r\n");
      out.write("					<tr id=\"tableType\">\r\n");
      out.write("						<td width=\"120\" align=\"center\">\r\n");
      out.write("						Type\r\n");
      out.write("						</td>\r\n");
      out.write("						<td width=\"400\">\r\n");
      out.write("							<select name=\"boardType\" id=\"boardType\">\r\n");
      out.write("								");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("							</select>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("\r\n");
      out.write("					<tr id=\"tableTitle\">\r\n");
      out.write("						<td width=\"120\" align=\"center\">\r\n");
      out.write("						Title\r\n");
      out.write("						</td>\r\n");
      out.write("						<td width=\"400\">\r\n");
      out.write("						<input name=\"boardTitle\" type=\"text\" size=\"50\" >\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr id=\"tableComment\">\r\n");
      out.write("						<td height=\"300\" align=\"center\">\r\n");
      out.write("						Comment\r\n");
      out.write("						</td>\r\n");
      out.write("						<td valign=\"top\">\r\n");
      out.write("						<textarea name=\"boardComment\"  rows=\"20\" cols=\"55\"></textarea>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					\r\n");
      out.write("					<tr id=\"tableWriter\">\r\n");
      out.write("						<td align=\"center\">\r\n");
      out.write("						Writer\r\n");
      out.write("						</td>\r\n");
      out.write("						<td>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</table>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align=\"right\">\r\n");
      out.write("				<a href=\"/board/boardList.do\">List</a>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("</form>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board/boardWrite.jsp(271,8) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/boardWrite.jsp(271,8) '${codeList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${codeList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/board/boardWrite.jsp(271,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("codeList");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("									<option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${codeList.codeId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${codeList.codeName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</option>						\r\n");
            out.write("								");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
